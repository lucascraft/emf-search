<%@ jet
	 package="org.eclipse.papyrus.infra.emf.search.codegen.jet.templates.core.helper.builder"
	 imports="java.util.List org.eclipse.papyrus.infra.emf.search.codegen.model.generator.* org.eclipse.emf.codegen.ecore.genmodel.GenPackage "
	 class="ModelSearchQueryBuilderHelper"
%>
<%
	ModelSearchGenSettings settings = (ModelSearchGenSettings) argument;
	String basePackage = settings.getGenModel().getModelPluginPackageName();
	List<GenPackage> genPackagesList = settings.getGenModel().getGenPackages();
%>
package search.helper.builder;

import java.util.List;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.papyrus.infra.emf.search.core.engine.IModelSearchQuery;
import org.eclipse.papyrus.infra.emf.search.core.parameters.IModelSearchQueryParameters;
import org.eclipse.papyrus.infra.emf.search.core.scope.IModelSearchScope;
import org.eclipse.papyrus.infra.emf.search.ecore.regex.ModelSearchQueryTextualExpressionEnum;

import search.evaluators.ModelTextualModelSearchQueryEvaluator;
import search.factories.ModelSearchQueryFactory;
import search.factories.ModelSearchQueryParametersFactory;

public class ModelSearchQueryBuilderHelper extends AbstractTextualModelSearchQueryBuilderHelper{
	
	private static ModelSearchQueryBuilderHelper instance;
	
	// Singleton
	public static ModelSearchQueryBuilderHelper getInstance() {
		return instance==null?instance = new ModelSearchQueryBuilderHelper():instance;
	}
	
	protected IModelSearchQueryParameters createParameters(
			IModelSearchScope<Object, Resource> scope,
			List<? extends Object> participants,
			ModelSearchQueryTextualExpressionEnum textualExpression) {
		
		IModelSearchQueryParameters parameters = ModelSearchQueryParametersFactory.getInstance().createSearchQueryParameters();

		parameters.setEvaluator(new ModelTextualModelSearchQueryEvaluator<IModelSearchQuery, Object>());
		parameters.setParticipantElements(participants);          
		parameters.setScope(scope);
		
		initTextualQueryParametersFromPatternKind(parameters, textualExpression);

		return parameters;
	}
	
	protected IModelSearchQuery createQuery(String pattern, IModelSearchQueryParameters parameters) {		
		return ModelSearchQueryFactory.getInstance().createModelSearchQuery(pattern, parameters);
	}
	
	<%
	for (GenPackage p : genPackagesList) {
	%>
	public IModelSearchQuery buildGlobalTextual<%=p.getPackageName()%>ModelSearchQuery(String expr,
			IModelSearchScope<Object, Resource> scope) {
		return buildTextualModelSearchQuery(
			expr,
			<%=p.getQualifiedPackageInterfaceName()%>.eINSTANCE.getEClassifiers(),
			ModelSearchQueryTextualExpressionEnum.NORMAL_TEXT,
			scope,
			"<%=p.getNSURI()%>" //$NON-NLS-1$
		);
	}
	<% } %>

	<%
	for (GenPackage p : genPackagesList) {
	%>
	public IModelSearchQuery buildGlobalRegex<%=p.getPackageName()%>ModelSearchQuery(String expr,
			IModelSearchScope<Object, Resource> scope) {
		return buildTextualModelSearchQuery(
			expr,
			<%=p.getQualifiedPackageInterfaceName()%>.eINSTANCE.getEClassifiers(),
			ModelSearchQueryTextualExpressionEnum.REGULAR_EXPRESSION,
			scope,
			"<%=p.getNSURI()%>" //$NON-NLS-1$
		);
	}
	<% } %>

	<%
	for (GenPackage p : genPackagesList) {
	%>
	public IModelSearchQuery buildGlobalCaseSensitive<%=p.getPackageName()%>ModelSearchQuery(
			String expr, IModelSearchScope<Object, Resource> scope) {
		return buildTextualModelSearchQuery(
			expr,
			<%=p.getQualifiedPackageInterfaceName()%>.eINSTANCE.getEClassifiers(),
			ModelSearchQueryTextualExpressionEnum.CASE_SENSITIVE,
			scope,
			"<%=p.getNSURI()%>" //$NON-NLS-1$
		);
	}
	<% } %>
	
	public IModelSearchQuery buildGlobalTextualModelSearchQuery(String pattern,
			IModelSearchScope<Object, Resource> scope, String nsURI) {
	<%
	for (GenPackage p : genPackagesList) {
	%>
		if (nsURI.equals("<%=p.getNSURI()%>")) { //$NON-NLS-1$
			return buildGlobalTextual<%=p.getPackageName()%>ModelSearchQuery(
				pattern,
				scope
			);
		}
	<% } %>
		return null;
	}

	public IModelSearchQuery buildGlobalRegexModelSearchQuery(String pattern,
			IModelSearchScope<Object, Resource> scope, String nsURI) {
	<%
	for (GenPackage p : genPackagesList) {
	%>
		if (nsURI.equals("<%=p.getNSURI()%>")) { //$NON-NLS-1$
			return buildGlobalRegex<%=p.getPackageName()%>ModelSearchQuery(
				pattern,
				scope
			);
		}
	<% } %>
		return null;
	}

	public IModelSearchQuery buildGlobalCaseSensitiveModelSearchQuery(
			String pattern, IModelSearchScope<Object, Resource> scope,
			String nsURI) {
	<%
	for (GenPackage p : genPackagesList) {
	%>
		if (nsURI.equals("<%=p.getNSURI()%>")) { //$NON-NLS-1$
			return buildGlobalCaseSensitive<%=p.getPackageName()%>ModelSearchQuery(
				pattern,
				scope
			);
		}
	<% } %>
		return null;
	}
}
