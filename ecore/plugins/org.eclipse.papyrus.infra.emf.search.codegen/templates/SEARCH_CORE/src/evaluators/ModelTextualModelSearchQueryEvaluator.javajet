<%@ jet
	 package="org.eclipse.papyrus.infra.emf.search.codegen.jet.templates.core.evaluators"
	 imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.papyrus.infra.emf.search.codegen.model.generator.* java.util.ArrayList java.util.List org.eclipse.emf.ecore.EObject"
	 class="ModelTextualModelSearchQueryEvaluator"
%>
<%
	ModelSearchGenSettings settings = (ModelSearchGenSettings) argument;
	List<EStringAccessor> genTypeParameter = settings.getTextualSettings().getEStringAccessors();
%>
package search.evaluators;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.papyrus.infra.emf.search.core.engine.IModelSearchQuery;
import org.eclipse.papyrus.infra.emf.search.ecore.engine.EcoreModelSearchQuery;
import org.eclipse.papyrus.infra.emf.search.ecore.evaluators.EcoreTextualModelSearchQueryEvaluator;
import org.eclipse.papyrus.infra.emf.search.ecore.regex.ModelSearchQueryTextualExpressionEnum;
import org.eclipse.papyrus.infra.emf.search.ecore.regex.ModelSearchQueryTextualExpressionMatchingHelper;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.ETypedElement;

import search.util.TextualFeaturesUtils;

import search.l10n.Messages;

public final class ModelTextualModelSearchQueryEvaluator<Q extends IModelSearchQuery, T> extends
EcoreTextualModelSearchQueryEvaluator<Q, T> {

	@Override
	public List<?> eval(Q query, T target, boolean notification) {
		List<Object> results = new ArrayList<Object>();
		if (query instanceof EcoreModelSearchQuery) {
			// discriminating according to participant meta elements selection
			for (Object o : query.getValidParticipantMetaElements()) {
				// In order to avoid duplicate results, the current element should be contained 
				// by the current resource
				if (target instanceof Resource) {
					if (o instanceof EObject) {
						Resource r = ((EObject) o).eResource();
						if (r instanceof Resource
								&& r.getURI().equals(
										((Resource) target).getURI())) {
							processVisitedElement(
									(EObject) o,
									results,
									query,
									target,
									notification
							);
						}
					}
				}
			}
		}
		return results;
	}
	
	private String computeExpression(Q query, ModelSearchQueryTextualExpressionEnum kind) {
		String expression = query.getQueryExpression();
		expression = (
				expression == "" &&  //$NON-NLS-1$ 
				kind == ModelSearchQueryTextualExpressionEnum.NORMAL_TEXT
				) ? 
						"*" : //$NON-NLS-2$
							expression;
		return expression;
	}
	
	private String resolveText(EObject eObj, ETypedElement eTypedElem) {
		return TextualFeaturesUtils
		.instance()
		.getTextFromETypedElement(eObj,
				eTypedElem);
	}
	
	private boolean matchExpression(
			String valuation,
			String expression,
			ModelSearchQueryTextualExpressionEnum kind
	) {
		return valuation != null
		&& ModelSearchQueryTextualExpressionMatchingHelper
		.getInstance().lookAt(
				valuation, expression,
				kind);
	}
	
	private boolean isAValidAttribute(ETypedElement eTypedElem) {
		return TextualFeaturesUtils.instance().
			getParticipantTextualTypedElement().contains(eTypedElem);
	}
	
	private void processVisitedElement(
			EObject eObj, 
			List<Object> results,
			Q query,
			T target,
			boolean notification
	) {
		if (TextualFeaturesUtils.instance()
				.getTextFromEStructuralFeatureIfAny(eObj) != null) {
            List<EStructuralFeature> eligibleFeatures = TextualFeaturesUtils.instance().
                getEStructuralFeaturesFromQueryAndEObject(
                    eObj,
                    query
                );
            
            for (ETypedElement eTypedElem : eligibleFeatures) {
				if (isAValidAttribute(eTypedElem)) {
					ModelSearchQueryTextualExpressionEnum kind = 
						((EcoreModelSearchQuery) query).getKind();
					String valuation = resolveText(eObj, eTypedElem);
					String expression = computeExpression(query, kind);
					if (matchExpression(valuation, expression, kind)) {
						results.add(
								query.processSearchResultOccurence(
										target,
										eObj,
										eTypedElem,
										valuation,
										notification
								)
						);
					}
				}
			}
		}
	}

	@Override
	public String getLabel() {
		return Messages
				.getString("ModelTextualModelSearchQueryEvaluator.Label"); //$NON-NLS-1$
	}
}
