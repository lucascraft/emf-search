package org.eclipse.papyrus.infra.emf.search.codegen.jet.templates.core.replace;

public class TextualReplaceTransformation
{
  protected static String nl;
  public static synchronized TextualReplaceTransformation create(String lineSeparator)
  {
    nl = lineSeparator;
    TextualReplaceTransformation result = new TextualReplaceTransformation();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package search.replace;" + NL + "" + NL + "import java.util.List;" + NL + "import java.util.regex.Pattern;" + NL + "" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.papyrus.infra.emf.search.core.engine.IModelSearchQuery;" + NL + "import org.eclipse.papyrus.infra.emf.search.core.internal.replace.provisional.AbstractModelSearchTransformation;" + NL + "import org.eclipse.papyrus.infra.emf.search.ecore.engine.EcoreModelSearchQuery;" + NL + "import org.eclipse.papyrus.infra.emf.search.ecore.regex.ModelSearchQueryTextualExpressionEnum;" + NL + "import org.eclipse.papyrus.infra.emf.search.ecore.regex.ModelSearchQueryTextualExpressionMatchingHelper;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.ETypedElement;" + NL + "" + NL + "import search.engine.ModelSearchQuery;" + NL + "import search.util.TextualFeaturesUtils;" + NL + "" + NL + "public class TextualReplaceTransformation extends" + NL + "\t\tAbstractModelSearchTransformation<EObject, IModelSearchQuery, String, String> {" + NL + "\t\t" + NL + "\tpublic TextualReplaceTransformation(EObject element, IModelSearchQuery query, String valuation) {" + NL + "\t\tsuper(element, query, valuation);" + NL + "\t}" + NL + "\t" + NL + "    public boolean isValid() {" + NL + "        return getModifiedElement() instanceof EObject;" + NL + "    }" + NL + "    " + NL + "    " + NL + "    private String resolveText(EObject eObj, ETypedElement eTypedElem) {" + NL + "        return TextualFeaturesUtils.instance().getTextFromETypedElement(eObj, eTypedElem);" + NL + "    }" + NL + "" + NL + "    private boolean matchExpression(String valuation, String expression, ModelSearchQueryTextualExpressionEnum kind) {" + NL + "        return valuation != null && ModelSearchQueryTextualExpressionMatchingHelper.getInstance().lookAt(valuation, expression, kind);" + NL + "    }" + NL + "" + NL + "    private boolean isAValidAttribute(ETypedElement eTypedElem) {" + NL + "        return TextualFeaturesUtils.instance().getParticipantTextualTypedElement().contains(eTypedElem);" + NL + "    }" + NL + "" + NL + "    private String computeExpression(ModelSearchQuery query, ModelSearchQueryTextualExpressionEnum kind) {" + NL + "        String expression = query.getQueryExpression();" + NL + "        return (expression == \"\" && //$NON-NLS-1$ " + NL + "                kind == ModelSearchQueryTextualExpressionEnum.NORMAL_TEXT) ?" + NL + "                        \"*\" : //$NON-NLS-2$" + NL + "                            expression;" + NL + "    }" + NL + "" + NL + "    public IStatus perform() {" + NL + "        try {" + NL + "            if (getQuery() instanceof ModelSearchQuery) {" + NL + "                ModelSearchQuery query = (ModelSearchQuery) getQuery();" + NL + "" + NL + "                String expr = query.getQueryExpression();" + NL + "                " + NL + "                List<EStructuralFeature> eligibleFeatures = TextualFeaturesUtils.instance().getEStructuralFeaturesFromQueryAndEObject(getModifiedElement(), query);" + NL + "" + NL + "                for (ETypedElement eTypedElem : eligibleFeatures) {" + NL + "                    if (isAValidAttribute(eTypedElem)) {" + NL + "                        ModelSearchQueryTextualExpressionEnum kind = ((EcoreModelSearchQuery) query).getKind();" + NL + "                        String valuation = resolveText(getModifiedElement(), eTypedElem);" + NL + "                        String expression = computeExpression(query, kind);" + NL + "                        if (matchExpression(valuation, expression, kind)) {" + NL + "                            String curValue = TextualFeaturesUtils.instance().getTextFromETypedElement(getModifiedElement(), eTypedElem);" + NL + "                            if (curValue != null && ModelSearchQueryTextualExpressionMatchingHelper.getInstance().lookAt(curValue, expr, query.getKind())) {" + NL + "                                switch (query.getKind()) {" + NL + "                                case REGULAR_EXPRESSION:" + NL + "                                    Pattern pattern = Pattern.compile(expr);" + NL + "" + NL + "                                    String newValue = pattern.matcher(curValue).replaceFirst(getValuation());" + NL + "                                    TextualFeaturesUtils.instance().setTextForETypedElement(getModifiedElement(), eTypedElem, newValue);" + NL + "" + NL + "                                    break;" + NL + "                                case CASE_SENSITIVE:" + NL + "                                case NORMAL_TEXT:" + NL + "                                    TextualFeaturesUtils.instance().setTextForETypedElement(getModifiedElement(), eTypedElem, getValuation());" + NL + "                                    break;" + NL + "                                }" + NL + "                            }" + NL + "                        }" + NL + "                    }" + NL + "                }" + NL + "            }" + NL + "        } catch (Throwable t) {" + NL + "            return Status.CANCEL_STATUS;" + NL + "        }" + NL + "        return Status.OK_STATUS;" + NL + "    }" + NL + "" + NL + "    @Override" + NL + "    public String getResult() {" + NL + "        Object o = getModifiedElement();" + NL + "" + NL + "        if (o instanceof ETypedElement) {" + NL + "            return TextualFeaturesUtils.instance().getTextFromETypedElement(((ETypedElement) o).eContainer(), (ETypedElement) o);" + NL + "        } else if (o instanceof EObject) {" + NL + "            return TextualFeaturesUtils.instance().getTextFromEStructuralFeatureIfAny((EObject) o);" + NL + "        }" + NL + "" + NL + "        return null;" + NL + "    }" + NL + "}";
  protected final String TEXT_2 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    return stringBuffer.toString();
  }
}
