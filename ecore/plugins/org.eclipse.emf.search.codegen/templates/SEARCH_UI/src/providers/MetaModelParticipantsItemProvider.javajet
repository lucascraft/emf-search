<%@ jet
	 package="org.eclipse.emf.search.codegen.jet.templates.ui.providers"
	 imports="java.util.Collection java.util.List org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.search.codegen.model.generator.*"
	 class="MetaModelParticipantsItemProvider"
%>
<%
	ModelSearchGenSettings settings = (ModelSearchGenSettings) argument;
	List<GenPackage> genPackagesList = settings.getGenModel().getGenPackages();
	String basePackage = settings.getGenModel().getModelPluginID();
%>
package search.ui.providers;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.search.ui.providers.AbstractMetaModelParticipantsItemProvider;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

<% for (GenPackage p : genPackagesList) { %>
import <%=p.getQualifiedPackageInterfaceName()%>;
<% } %> 

public class MetaModelParticipantsItemProvider extends
AbstractMetaModelParticipantsItemProvider {
	private Collection<String> nsURIs;
	public MetaModelParticipantsItemProvider(Collection<String> nsURIs) {
		this.nsURIs = nsURIs;
	}
	public Object[] getElements(Object inputElement) {
		List<EClassifier> eClassifierList = new ArrayList<EClassifier>();
		<% for (GenPackage p : genPackagesList) { %>
		if (nsURIs.contains(<%=p.getPackageInterfaceName()%>.eNS_URI)) {
			eClassifierList.addAll(<%=p.getPackageInterfaceName()%>.eINSTANCE.getEClassifiers());
		}
		<% } %>
		return eClassifierList.toArray();
	}
	   @Override
    public boolean hasChildren(Object element) {
        return getChildren(element).length > 0;
    }

    @Override
    public Object[] getChildren(Object parentElement) {
        if (parentElement instanceof EClass) {
            return ((EClass)parentElement).getEAttributes().toArray();
        }
        return super.getChildren(parentElement);
    }
    
    @Override
    public Object getParent(Object element) {
        if (element instanceof EAttribute) {
            return ((EAttribute)element).eContainer();
        }
        return super.getParent(element);
    }
}
