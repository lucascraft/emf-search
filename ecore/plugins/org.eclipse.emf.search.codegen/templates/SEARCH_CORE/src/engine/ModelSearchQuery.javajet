<%@ jet
	 package="org.eclipse.emf.search.codegen.jet.templates.core.engine"
	 imports="java.util.List org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.search.codegen.model.generator.*"
	 class="ModelSearchQuery"
%>
<%
	ModelSearchGenSettings settings = (ModelSearchGenSettings) argument;
	String basePackage = settings.getGenModel().getModelPluginPackageName();
	List<GenPackage> genPackagesList = settings.getGenModel().getGenPackages();
	String modelName = settings.getGenModel().getModelName();
%>
package search.engine;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.search.core.engine.IModelSearchQuery;
import org.eclipse.emf.search.core.eval.IModelSearchQueryEvaluator;
import org.eclipse.emf.search.core.parameters.IModelSearchQueryParameters;
import org.eclipse.emf.search.core.results.IModelResultEntry;
import org.eclipse.emf.search.ecore.engine.EcoreMetaModelIntrospector;
import org.eclipse.emf.search.ecore.engine.EcoreModelSearchQuery;
import org.eclipse.emf.search.ecore.results.EcoreModelSearchResultEntry;
import org.eclipse.emf.search.ecore.utils.EcoreModelLoaderUtil;

import search.Activator;
import search.l10n.Messages;
import search.evaluators.ModelTextualModelSearchQueryEvaluator;

<% for (GenPackage p : genPackagesList) { %>
import <%=p.getQualifiedPackageInterfaceName()%>;
<% } %> 

/**
 * Gather all model search settings to run a specific query.
 * TODO: the name of the class and its file should include modelName
 * 
 */
public final class ModelSearchQuery extends EcoreModelSearchQuery {
	public final static String <%=modelName%>_MODEL_SEARCH_IMAGE_PATH = "icons/esearch.gif"; //$NON-NLS-1$
	public final static String <%=modelName%>_MODEL_SEARCH_RESULT_IMAGE_PATH = "icons/esearch.gif"; //$NON-NLS-1$

	final static class <%=modelName%>SupportedElements {
		private static List<EClassifier> get<%=modelName%>EClassifiersLiterals() {
			List<EClassifier> eclassifiersLiteralsList = new ArrayList<EClassifier>();
			
			try {
			<% for (GenPackage p : genPackagesList) { %>
				for (Object o : <%=p.getPackageInterfaceName()%>.eINSTANCE.getEClassifiers()) {
					if (o instanceof ENamedElement ) {
						eclassifiersLiteralsList.add((EClassifier)o);
					}
				}
			<% } %>
			} catch (Throwable t) {
				Activator.getDefault().getLog().log(new Status(IStatus.ERROR, Activator.PLUGIN_ID, 0, Messages.getString("ModelSearchQuery.<%=modelName%>ClassifiersWalkErrorMessage"), t)); //$NON-NLS-1$
			}
			
			return eclassifiersLiteralsList;
		}

		public static List<EClassifier> getSupportedElements(List<? extends Object> participantEClassList) {
			ArrayList<EClassifier> definitiveMetaElementParticipantList = new ArrayList<EClassifier>();
			for (EClassifier eClass : get<%=modelName%>EClassifiersLiterals()) {
				if (participantEClassList.contains(eClass)) {
					definitiveMetaElementParticipantList.add(eClass);
				}
			}
			return definitiveMetaElementParticipantList;
		}
	}
	
	public ModelSearchQuery(String expr, IModelSearchQueryParameters parameters) {
		super(expr, parameters);
	}
	
	@Override
	public String getQueryImagePath() {
		return <%=modelName%>_MODEL_SEARCH_IMAGE_PATH;
	}
	
	@Override
	public String getResultImagePath() {
		return <%=modelName%>_MODEL_SEARCH_RESULT_IMAGE_PATH;
	}

	@Override
    public String getBundleSymbolicName() {
    	return Activator.getDefault().getBundle().getSymbolicName();
    }
	
    @Override
    public IStatus search(Object resource, boolean notify) {
        return search(resource, notify, new NullProgressMonitor());
    }

	public IStatus search(Object resource, boolean notify, IProgressMonitor monitor) {
		try {
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			
			EObject root = EcoreModelLoaderUtil.openFile(resource, false);
			
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			
			validParticipantMetaElements = EcoreMetaModelIntrospector.discriminateValidMetaElements((EObject)root, <%=modelName%>SupportedElements.getSupportedElements(participantElements));
			
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			
			((IModelSearchQueryEvaluator<IModelSearchQuery, Object>)getEvaluator()).eval(this, resource, notify);
			
			monitor.setTaskName(getLabel());
			
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
		} catch (Exception e) {
			return Status.CANCEL_STATUS;
		}
		return Status.OK_STATUS;
	}
	
	@Override
	public IModelSearchQueryEvaluator<IModelSearchQuery, ?> getEvaluator() {
		evaluator = getModelSearchParameters().getEvaluator();
		//TODO: get the name of evalutar's class compound of modelName and string "TextualModelSearchQueryEvaluator"
		return evaluator!=null?evaluator:(evaluator=new ModelTextualModelSearchQueryEvaluator<IModelSearchQuery, Object>());
	}
	
	@Override
	public String getName() {
	   switch(getKind()) {
		 case NORMAL_TEXT:
		   return Messages.getString("<%=modelName%>ModelSearchQuery.NormalTextMessage"); //$NON-NLS-1$
		 case CASE_SENSITIVE:
		   return Messages.getString("<%=modelName%>ModelSearchQuery.CaseSensitiveMessage"); //$NON-NLS-1$
		 case REGULAR_EXPRESSION:
		   return Messages.getString("<%=modelName%>ModelSearchQuery.RegularExpressionMessage"); //$NON-NLS-1$
       }
	   
	   return Messages.getString("<%=modelName%>ModelSearchQuery.DefaultSearchKindMessage"); //$NON-NLS-1$
	}
}
